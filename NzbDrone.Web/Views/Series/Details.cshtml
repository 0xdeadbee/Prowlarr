@model NzbDrone.Web.Models.SeriesModel
@using NzbDrone.Core.Repository
@using NzbDrone.Web.Models
@section TitleContent{
    @Model.Title
}

<script src="../../Scripts/seriesDetails.js" type="text/javascript"></script>

<style>
    .ignoreEpisode
    {
        width: 18px;
        height: 18px;
        padding-bottom: -6px;
    }
    
    .ignoredEpisodesMaster
    {
        width: 18px;
        height: 18px;
        padding-left: 18px;
        padding-right: -18px;
    }
</style>

@section ActionMenu{
   <ul id="sub-menu">
        <li>@Html.ActionLink("Back to Series List", "Index", "Series")</li>
        <li>@Ajax.ActionLink("Scan For Episodes on Disk", "SyncEpisodesOnDisk", "Command", new { seriesId = Model.SeriesId }, null)</li>
        <li>@Ajax.ActionLink("Update Info", "UpdateInfo", "Command", new { seriesId = Model.SeriesId }, null)</li>
        <li>@Ajax.ActionLink("Rename Series", "RenameSeries", "Command", new { seriesId = Model.SeriesId }, null)</li>
    </ul>
}
@section MainContent{
    @foreach (var season in Model.Seasons.Where(s => s > 0).Reverse())
    {
        <h3>
            Season @season</h3>
        <div class="grid-container">
            @{
        Html.Telerik().Grid<EpisodeModel>().Name("seasons_" + season)
            .TableHtmlAttributes(new { @class = "Grid" })
            .Columns(columns =>
                         {
                             columns.Bound(o => o.Ignored)
                                 .Title("<img src='../../Content/Images/ignoredNeutral.png' class='ignoredEpisodesMaster ignoreEpisode' id='master_" + season + "' />")
                                 .ClientTemplate(
                                     "<img src='../../Content/Images/ignoredNeutral.png' class='ignoreEpisode ignoreEpisode_" + season + " ignored' id='<#= EpisodeId #>' />")
                                 .Width(20)
                                 .HtmlAttributes(new { style = "text-align:center" });

                             columns.Bound(c => c.EpisodeNumber).Width(0).Title("Episode");
                             columns.Bound(c => c.Title).Title("Title");
                             columns.Bound(c => c.AirDate).Width(0);
                             columns.Bound(c => c.Quality).Width(0);
                             columns.Bound(c => c.Status).Width(0);
                             columns.Bound(o => o.EpisodeId).Title("")
                                 .ClientTemplate("<a href='#Search' onClick=\"searchForEpisode('<#= EpisodeId #>'); return false;\">Search</a>"
                                                    + " | " +
                                                    "<a href='#Rename' onClick=\"renameEpisode('<#= EpisodeFileId #>'); return false;\">Rename</a>");
                         })
            .DetailView(detailView => detailView.ClientTemplate("<div><#= Overview #> </br><#= Path #> </div>"))
            .Sortable(rows => rows.OrderBy(epSort => epSort.Add(c => c.EpisodeNumber).Descending()).Enabled(false))
            .Footer(true)
            .DataBinding(
                d =>
                d.Ajax().Select("_AjaxSeasonGrid", "Series",
                               new RouteValueDictionary { { "seriesId", Model.SeriesId }, { "seasonNumber", season } }))
            .ToolBar(
                c =>
                c.Custom().Text("Rename Season").Action("RenameSeason", "Series", new { seasonId = season })
                    .ButtonType(GridButtonType.Text))
            .ClientEvents(clientEvents =>
                              {
                                  clientEvents.OnRowDataBound("grid_rowBound");
                                  clientEvents.OnDataBound("grid_dataBound");
                              })
            .Render();}
        </div>
    }
    @if (Model.Seasons.Any(s => s == 0))
    {
        <br />
        <h3>
            Specials</h3>
        <div class="grid-container">
            @{Html.Telerik().Grid<EpisodeModel>().Name("seasons_specials")
                    .TableHtmlAttributes(new { @class = "Grid" })
                    .Columns(columns =>
                             {
                                 columns.Bound(o => o.Ignored)
                                     .Title("<img src='../../Content/Images/ignoredNeutral.png' class='ignoredEpisodesMaster ignoreEpisode' id='master_0' />")
                                     .ClientTemplate(
                                         "<img src='../../Content/Images/ignoredNeutral.png' class='ignoreEpisode ignoreEpisode_0 ignored' id='<#= EpisodeId #>' />")
                                     .Width(20)
                                     .HtmlAttributes(new { style = "text-align:center" });

                                 columns.Bound(c => c.EpisodeNumber).Width(10).Title("Episode");
                                 columns.Bound(c => c.Title).Title("Title").Width(10000);
                                 columns.Bound(c => c.AirDate).Width(10);
                                 columns.Bound(c => c.Quality).Width(10);
                                 columns.Bound(c => c.Status).Width(10);
                             })
                    .DetailView(detailView => detailView.ClientTemplate("<div><#= Overview #> </br><#= Path #> </div>"))
                    .Sortable(rows => rows.OrderBy(epSort => epSort.Add(c => c.EpisodeNumber).Descending()).Enabled(false))
                    .Footer(true)
                    .DataBinding(
                        d =>
                        d.Ajax().Select("_AjaxSeasonGrid", "Series",
                                        new RouteValueDictionary { { "seriesId", Model.SeriesId }, { "seasonNumber", 0 } }
            )).Render(); }
        </div>
    }
}
@section Scripts{
    <script type="text/javascript">
        function episodeDetailExpanded(e) {
            $console.log("OnDetailViewExpand :: " + e.masterRow.cells[1].innerHTML);
        }

        var renameEpisodeUrl = '@Url.Action("Rename", "Episode")';

        function renameEpisode(id) {
            $.ajax({
                type: "POST",
                url: renameEpisodeUrl,
                data: jQuery.param({ episodeFileId: id }),
                error: function (req, status, error) {
                    alert("Sorry! We could rename " + id + " at this time. " + error);
                }
            });
        }

        seriesId = @Model.SeriesId;
   
    </script>
}
