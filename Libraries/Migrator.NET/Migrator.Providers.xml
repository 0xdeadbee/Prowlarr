<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Migrator.Providers</name>
    </assembly>
    <members>
        <member name="T:Migrator.Providers.Dialect">
            <summary>
            Defines the implementations specific details for a particular database.
            </summary>
        </member>
        <member name="M:Migrator.Providers.Dialect.RegisterColumnType(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Subclasses register a typename for the given type code and maximum
            column length. <c>$l</c> in the type name will be replaced by the column
            length (if appropriate)
            </summary>
            <param name="code">The typecode</param>
            <param name="capacity">Maximum length of database type</param>
            <param name="name">The database type name</param>
        </member>
        <member name="M:Migrator.Providers.Dialect.RegisterColumnType(System.Data.DbType,System.String)">
            <summary>
            Suclasses register a typename for the given type code. <c>$l</c> in the 
            typename will be replaced by the column length (if appropriate).
            </summary>
            <param name="code">The typecode</param>
            <param name="name">The database type name</param>
        </member>
        <member name="M:Migrator.Providers.Dialect.GetTypeName(System.Data.DbType)">
            <summary>
            Get the name of the database type associated with the given 
            </summary>
            <param name="type">The DbType</param>
            <returns>The database type name used by ddl.</returns>
        </member>
        <member name="M:Migrator.Providers.Dialect.GetTypeName(System.Data.DbType,System.Int32)">
            <summary>
            Get the name of the database type associated with the given 
            </summary>
            <param name="type">The DbType</param>
            <returns>The database type name used by ddl.</returns>
            <param name="length"></param>
        </member>
        <member name="M:Migrator.Providers.Dialect.GetTypeName(System.Data.DbType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the name of the database type associated with the given 
            </summary>
            <param name="type">The DbType</param>
            <returns>The database type name used by ddl.</returns>
            <param name="length"></param>
            <param name="precision"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Migrator.Providers.Dialect.RegisterUnsignedCompatible(System.Data.DbType)">
            <summary>
            Subclasses register which DbTypes are unsigned-compatible (ie, available in signed and unsigned variants)
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Migrator.Providers.Dialect.IsUnsignedCompatible(System.Data.DbType)">
            <summary>
            Determine if a particular database type has an unsigned variant
            </summary>
            <param name="type">The DbType</param>
            <returns>True if the database type has an unsigned variant, otherwise false</returns>
        </member>
        <member name="T:Migrator.Providers.SqlServer.SqlServerCeTransformationProvider">
            <summary>
            Migration transformations provider for Microsoft SQL Server Compact Edition.
            </summary>
        </member>
        <member name="T:Migrator.Providers.SqlServer.SqlServerTransformationProvider">
            <summary>
            Migration transformations provider for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Migrator.Providers.TransformationProvider">
            <summary>
            Base class for every transformation providers.
            A 'tranformation' is an operation that modifies the database.
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddTable(System.String,Migrator.Framework.Column[])">
            <summary>
            Add a new table
            </summary>
            <param name="name">Table name</param>
            <param name="columns">Columns</param>
            <example>
            Adds the Test table with two columns:
            <code>
            Database.AddTable("Test",
                              new Column("Id", typeof(int), ColumnProperty.PrimaryKey),
                              new Column("Title", typeof(string), 100)
                             );
            </code>
            </example>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddTable(System.String,System.String,Migrator.Framework.Column[])">
            <summary>
            Add a new table
            </summary>
            <param name="name">Table name</param>
            <param name="columns">Columns</param>
            <param name="engine">the database storage engine to use</param>
            <example>
            Adds the Test table with two columns:
            <code>
            Database.AddTable("Test", "INNODB",
                              new Column("Id", typeof(int), ColumnProperty.PrimaryKey),
                              new Column("Title", typeof(string), 100)
                             );
            </code>
            </example>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Migrator.Framework.ColumnProperty,System.Object)">
            <summary>
            Add a new column to an existing table.
            </summary>
            <param name="table">Table to which to add the column</param>
            <param name="column">Column name</param>
            <param name="type">Date type of the column</param>
            <param name="size">Max length of the column</param>
            <param name="property">Properties of the column, see <see cref="T:Migrator.Framework.ColumnProperty">ColumnProperty</see>,</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType)">
            <summary>
            <see cref="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Migrator.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32)">
            <summary>
            <see cref="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Migrator.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,Migrator.Framework.ColumnProperty)">
            <summary>
            <see cref="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Migrator.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Migrator.Framework.ColumnProperty)">
            <summary>
            <see cref="M:Migrator.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Migrator.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddPrimaryKey(System.String,System.String,System.String[])">
            <summary>
            Append a primary key to a table.
            </summary>
            <param name="name">Constraint name</param>
            <param name="table">Table name</param>
            <param name="columns">Primary column names</param>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String,System.String,System.String)">
            <summary>
            Guesses the name of the foreign key and add it
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String[],System.String,System.String[])">
            <summary>
            Guesses the name of the foreign key and add it
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String,System.String,System.String,Migrator.Framework.ForeignKeyConstraint)">
            <summary>
            Guesses the name of the foreign key and add it
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String[],System.String,System.String[],Migrator.Framework.ForeignKeyConstraint)">
            <summary>
            Guesses the name of the foreign key and add it
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddForeignKey(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Append a foreign key (relation) between two tables.
            tables.
            </summary>
            <param name="name">Constraint name</param>
            <param name="primaryTable">Table name containing the primary key</param>
            <param name="primaryColumn">Primary key column name</param>
            <param name="refTable">Foreign table name</param>
            <param name="refColumn">Foreign column name</param>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.AddForeignKey(System.String,System.String,System.String[],System.String,System.String[])">
            <summary>
            <see cref="M:Migrator.Framework.ITransformationProvider.AddForeignKey(System.String,System.String,System.String,System.String,System.String)">
            AddForeignKey(string, string, string, string, string)
            </see>
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.ConstraintExists(System.String,System.String)">
            <summary>
            Determines if a constraint exists.
            </summary>
            <param name="name">Constraint name</param>
            <param name="table">Table owning the constraint</param>
            <returns><c>true</c> if the constraint exists.</returns>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.ExecuteQuery(System.String)">
            <summary>
            Execute an SQL query returning results.
            </summary>
            <param name="sql">The SQL command.</param>
            <returns>A data iterator, <see cref="T:System.Data.IDataReader">IDataReader</see>.</returns>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.BeginTransaction">
            <summary>
            Starts a transaction. Called by the migration mediator.
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.Rollback">
            <summary>
            Rollback the current migration. Called by the migration mediator.
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.Commit">
            <summary>
            Commit the current transaction. Called by the migrations mediator.
            </summary>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.MigrationApplied(System.Int64)">
            <summary>
            Marks a Migration version number as having been applied
            </summary>
            <param name="version">The version number of the migration that was applied</param>
        </member>
        <member name="M:Migrator.Providers.TransformationProvider.MigrationUnApplied(System.Int64)">
            <summary>
            Marks a Migration version number as having been rolled back from the database
            </summary>
            <param name="version">The version number of the migration that was removed</param>
        </member>
        <member name="P:Migrator.Providers.TransformationProvider.Logger">
            <summary>
            Returns the event logger
            </summary>
        </member>
        <member name="P:Migrator.Providers.TransformationProvider.AppliedMigrations">
            <summary>
            The list of Migrations currently applied to the database.
            </summary>
        </member>
        <member name="T:Migrator.Providers.NoOpTransformationProvider">
            <summary>
            No Op (Null Object Pattern) implementation of the ITransformationProvider
            </summary>
        </member>
        <member name="T:Migrator.Providers.ColumnPropertiesMapper">
            <summary>
            This is basically a just a helper base class
            per-database implementors may want to override ColumnSql
            </summary>
        </member>
        <member name="F:Migrator.Providers.ColumnPropertiesMapper.type">
            <summary>The SQL type</summary>
        </member>
        <member name="F:Migrator.Providers.ColumnPropertiesMapper.name">
            <summary>The name of the column</summary>
        </member>
        <member name="F:Migrator.Providers.ColumnPropertiesMapper.columnSql">
            <summary>
            the type of the column
            </summary>
        </member>
        <member name="F:Migrator.Providers.ColumnPropertiesMapper.indexed">
            <summary>
            Sql if This column is Indexed
            </summary>
        </member>
        <member name="F:Migrator.Providers.ColumnPropertiesMapper.defaultVal">
            <summary>
            Sql if this column has a default value
            </summary>
        </member>
        <member name="P:Migrator.Providers.ColumnPropertiesMapper.ColumnSql">
            <summary>
            The sql for this column, override in database-specific implementation classes
            </summary>
        </member>
        <member name="T:Migrator.Providers.TypeNames">
            <summary>
            This class maps a DbType to names.
            </summary>
            <remarks>
            Associations may be marked with a capacity. Calling the <c>Get()</c>
            method with a type and actual size n will return the associated
            name with smallest capacity >= n, if available and an unmarked
            default type otherwise.
            Eg, setting
            <code>
            	Names.Put(DbType,			"TEXT" );
            	Names.Put(DbType,	255,	"VARCHAR($l)" );
            	Names.Put(DbType,	65534,	"LONGVARCHAR($l)" );
            </code>
            will give you back the following:
            <code>
            	Names.Get(DbType)			// --> "TEXT" (default)
            	Names.Get(DbType,100)		// --> "VARCHAR(100)" (100 is in [0:255])
            	Names.Get(DbType,1000)	// --> "LONGVARCHAR(1000)" (100 is in [256:65534])
            	Names.Get(DbType,100000)	// --> "TEXT" (default)
            </code>
            On the other hand, simply putting
            <code>
            	Names.Put(DbType, "VARCHAR($l)" );
            </code>
            would result in
            <code>
            	Names.Get(DbType)			// --> "VARCHAR($l)" (will cause trouble)
            	Names.Get(DbType,100)		// --> "VARCHAR(100)" 
            	Names.Get(DbType,1000)	// --> "VARCHAR(1000)"
            	Names.Get(DbType,10000)	// --> "VARCHAR(10000)"
            </code>
            </remarks>
        </member>
        <member name="M:Migrator.Providers.TypeNames.Get(System.Data.DbType)">
            <summary>
            Get default type name for specified type
            </summary>
            <param name="typecode">the type key</param>
            <returns>the default type name associated with the specified key</returns>
        </member>
        <member name="M:Migrator.Providers.TypeNames.Get(System.Data.DbType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the type name specified type and size
            </summary>
            <param name="typecode">the type key</param>
            <param name="size">the SQL length </param>
            <param name="scale">the SQL scale </param>
            <param name="precision">the SQL precision </param>
            <returns>
            The associated name with smallest capacity >= size if available and the
            default type name otherwise
            </returns>
        </member>
        <member name="M:Migrator.Providers.TypeNames.Put(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Set a type name for specified type key and capacity
            </summary>
            <param name="typecode">the type key</param>
            <param name="capacity">the (maximum) type size/length</param>
            <param name="value">The associated name</param>
        </member>
        <member name="M:Migrator.Providers.TypeNames.Put(System.Data.DbType,System.String)">
            <summary>
            
            </summary>
            <param name="typecode"></param>
            <param name="value"></param>
        </member>
        <member name="T:Migrator.Providers.PostgreSQL.PostgreSQLTransformationProvider">
            <summary>
            Migration transformations provider for PostgreSql (using NPGSql .Net driver)
            </summary>
        </member>
        <member name="T:Migrator.Providers.Mysql.MySqlTransformationProvider">
            <summary>
            Summary description for MySqlTransformationProvider.
            </summary>
        </member>
        <member name="T:Migrator.Providers.SQLite.SQLiteTransformationProvider">
            <summary>
            Summary description for SQLiteTransformationProvider.
            </summary>
        </member>
        <member name="M:Migrator.Providers.SQLite.SQLiteTransformationProvider.ParseSqlForColumnNames(System.String)">
            <summary>
            Turn something like 'columnName INTEGER NOT NULL' into just 'columnName'
            </summary>
        </member>
        <member name="M:Migrator.Providers.SQLite.SQLiteTransformationProvider.ExtractNameFromColumnDef(System.String)">
            <summary>
            Name is the first value before the space.
            </summary>
            <param name="columnDef"></param>
            <returns></returns>
        </member>
    </members>
</doc>
