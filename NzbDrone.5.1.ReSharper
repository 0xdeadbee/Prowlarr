<Configuration>
  <CodeStyleSettings>
    <ExternalPath IsNull="False">
    </ExternalPath>
    <Sharing>SOLUTION</Sharing>
    <CSharp>
      <FormatSettings>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <WRAP_LIMIT>140</WRAP_LIMIT>
      </FormatSettings>
      <UsingsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      </Naming2>
    </CSharp>
    <VB>
      <FormatSettings />
      <ImportsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      </Naming2>
    </VB>
    <Web>
      <Naming2 />
    </Web>
    <Xaml>
      <Naming2 />
    </Xaml>
    <XML>
      <FormatSettings />
    </XML>
    <GenerateMemberBody />
    <Naming2>
      <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
      <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <Abbreviation Text="IIS" />
      <Abbreviation Text="SQ" />
    </Naming2>
  </CodeStyleSettings>
  <CustomStructuralPatterns>
    <Pattern Severity="SUGGESTION">
      <Comment>Replace with FluentAssertion</Comment>
      <ReplacePattern>$arg$.Should().BeTrue();</ReplacePattern>
      <SearchPattern><![CDATA[Assert.IsTrue($arg$);
]]></SearchPattern>
      <Params />
      <Placeholders>
        <ArgumentPlaceholder Name="excpected" Minimal="1" Maximal="1" />
      </Placeholders>
    </Pattern>
    <Pattern Severity="SUGGESTION">
      <Comment>Replace with FluentAssertion</Comment>
      <ReplacePattern>$arg$.Should().BeFalse();</ReplacePattern>
      <SearchPattern><![CDATA[Assert.IsFalse($arg$);
]]></SearchPattern>
      <Params />
      <Placeholders>
        <ArgumentPlaceholder Name="excpected" Minimal="1" Maximal="1" />
      </Placeholders>
    </Pattern>
    <Pattern Severity="SUGGESTION">
      <ReplacePattern>$actual$.Should().Be($excpected$);</ReplacePattern>
      <SearchPattern><![CDATA[Assert.AreEqual($actual$, $excpected$);
]]></SearchPattern>
      <Params>
        <IgnoreBracesInSingleStatementBlocks>False</IgnoreBracesInSingleStatementBlocks>
        <IgnoreParanthesisInExpressions>False</IgnoreParanthesisInExpressions>
        <SmartMatchAssociativeExpressions>False</SmartMatchAssociativeExpressions>
        <TreatReversedBinaryExpressionsEquivalent>Never</TreatReversedBinaryExpressionsEquivalent>
      </Params>
      <Placeholders>
        <ArgumentPlaceholder Name="excpected" Minimal="1" Maximal="1" />
        <ArgumentPlaceholder Name="actual" Minimal="1" Maximal="1" />
      </Placeholders>
    </Pattern>
    <Pattern Severity="HINT">
      <ReplacePattern>$excpected$.Should().Be($actual$);</ReplacePattern>
      <SearchPattern><![CDATA[$actual$.Should().Be($excpected$);
]]></SearchPattern>
      <Params />
      <Placeholders>
        <ArgumentPlaceholder Name="excpected" Minimal="1" Maximal="1" />
        <ArgumentPlaceholder Name="actual" Minimal="1" Maximal="1" />
      </Placeholders>
    </Pattern>
    <Pattern Severity="SUGGESTION">
      <ReplacePattern>$arg$.Should().NotBeNull();</ReplacePattern>
      <SearchPattern>Assert.IsNotNull($arg$);</SearchPattern>
      <Params />
      <Placeholders>
        <ArgumentPlaceholder Name="arg" Minimal="1" Maximal="1" />
      </Placeholders>
    </Pattern>
    <Pattern Severity="SUGGESTION">
      <ReplacePattern>$arg$.Should().NotBeEmpty();</ReplacePattern>
      <SearchPattern>Assert.IsNotEmpty($arg$);</SearchPattern>
      <Params />
      <Placeholders>
        <ArgumentPlaceholder Name="arg" Minimal="1" Maximal="1" />
      </Placeholders>
    </Pattern>
    <Pattern Severity="SUGGESTION">
      <ReplacePattern>$arg$.Should().BeEmpty();</ReplacePattern>
      <SearchPattern>Assert.IsEmpty($arg$);</SearchPattern>
      <Params />
      <Placeholders>
        <ArgumentPlaceholder Name="arg" Minimal="1" Maximal="1" />
      </Placeholders>
    </Pattern>
  </CustomStructuralPatterns>
</Configuration>